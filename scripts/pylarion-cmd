#!/usr/bin/env python

import os
import sys
import commands
import getopt
import ConfigParser
import shutil
from pylarion.cli.CliDoc import CliDoc
from pylarion.cli.CliWorkItem import CliWorkItem
from pylarion.cli.CliTestRun import CliTestRun


def usage():
    ustr = """\nUsage: pylarion-cmd COMMAND [options]
Commands:
  list           the documents under specified space;
                 the test cases or requirement in document;
                 the links between workitems;
                 the runs by query;
                 the test steps for the specified test case;
  create         run
  update         the test steps for one testcase
                 the status for run
                 the result of test case(s) in run
                 the customer fileds of plannedin and assignee for run

Options:
  -h, [--help]            show this help message
  -v, [--version]         show version
  -d, [--document]        document name
  -t, [--workitem_type]   workitem workitem_type
  -i, [--caseid]          the case id
  -q, [--requirement]     the requirement id
  -s, [--steps]           the steps of test case
  -l, [--links]           the links of workitem
  -r, [--run]             the test run
  -m, [--template]        the test template
  -o, [--result]          the case result in run
  -e, [--query]           the query items
  -c, [--comment]         the case comment in test run
  -u, [--status]          the status of test run
  -p, [--plan_ids]        the project plan ids
  -n, [--plannedin]       the plannedin of run
  -a, [--assignee]        the assignee of run

Example:
  https://docs.engineering.redhat.com/x/CCWPAg
"""
    print ustr


def read_conf(fpath):
    cfile = ConfigParser.ConfigParser()
    fdict = {}
    try:
        cfile.read(fpath)
        fdict["space"] = cfile.get('cmd', 'space')
        fdict["project"] = cfile.get('webservice', 'default_project')
        fdict["output"] = cfile.get('cmd', 'output')
        fdict["user"] = cfile.get('webservice', 'user')
        try:
            fdict["plan_id"] = cfile.get('cmd', 'plan_id')
            fdict["assignee"] = cfile.get('cmd', 'assignee')
        except:
            pass
    except ConfigParser.NoSectionError:
        print("Except: Not found config file ~/.pylarion")
    return fdict


def get_opts(argvs, optstr, lst):
    config = {}
    try:
        opts, args = getopt.getopt(argvs[2:], optstr, lst)
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(2)

    output = None
    verbose = False
    for o, a in opts:
        if o in ("--help", "-h"):
            usage()
            sys.exit()
        elif o in ["--document", "-d"]:
            config["document"] = a
        elif o in ["--workitem_type", "-t"]:
            config["workitem_type"] = a
        elif o in ["--caseid", "-i"]:
            config["caseid"] = a
        elif o in ["--requirement", "-q"]:
            config["requirement"] = a
        elif o in ["--steps", "-s"]:
            config["steps"] = a
        elif o in ["--status", "-u"]:
            config["status"] = a
        elif o in ["--links", "-l"]:
            config["links"] = a
        elif o in ["--run", "-r"]:
            config["run"] = a
        elif o in ["--template", "-m"]:
            config["template"] = a
        elif o in ["--result", "-o"]:
            config["result"] = a
        elif o in ["--query", "-e"]:
            config["query"] = a
        elif o in ["--comment", "-c"]:
            config["comment"] = a
        elif o in ["--plan_id", "-p"]:
            config["plan_id"] = a
        elif o in ["--planned_in", "-n"]:
            config["plannedin"] = a
        elif o in ["--assignee", "-a"]:
            config["assignee"] = a
    return config


def get_input(description=''):
    return raw_input("%s:" % description)


def check_parameter(param1, fdict):
    try:
        if fdict[param1]:
            return True
        else:
            return False
    except:
        pass


def main():
    # get who am I
    ret, who = commands.getstatusoutput("whoami")
    if who == "root":
        config_file = "/root/.pylarion"
    else:
        config_file = "/home/%s/.pylarion" % who

    # get config information
    fdict = read_conf(config_file)
    try:
        doc = CliDoc(fdict['project'], fdict['space'])
        wi = CliWorkItem(fdict['project'])
        user = fdict['user']
    except:
        print "Failed to get information from pylarion.cfg file!"
        sys.exit(1)

    # init the list for options
    lst = ["document", "workitem_type", "caseid",
           "steps", "help"]
    lrole = ["verifies", "is verified", "relate to",
             "is related to"]

    # create output directory and file
    output_dir = fdict['output']
    if '~' in output_dir:
        user_path = os.path.expanduser('~')
        output_dir = output_dir.replace('~', user_path)

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # no command, option or one option -h
    elif (len(sys.argv) == 1) or \
         (len(sys.argv) == 2 and sys.argv[1] in ["-h", "--help"]):
        usage()
        sys.exit()

    # no command, one option -v
    elif len(sys.argv) == 2 and sys.argv[1] in ["-v", "--version"]:
        print "Current version is pylarion-cmd 2.0"
        sys.exit()

    # one command without option
    elif len(sys.argv) == 2 and sys.argv[1] == "list":
        doc.get_docs(os.path.join(os.path.expanduser('~'), "document.txt"))

    # one command with option(s)
    elif sys.argv[1] == "list":
        optstr = 'd:t:i:q:m:r:e:c:o:u:shlvpna'
        con_dict = get_opts(sys.argv, optstr, lst)

        # test steps of the case
        if 'caseid' in con_dict and 'steps' in con_dict:
            step_file = ('%s/%s.txt' % (output_dir, con_dict["caseid"]))
            wi.get_steps_from_server(con_dict['caseid'], step_file)

        # get links for case
        elif "caseid" in con_dict and "links" in con_dict:
            wi.list_linked_wis_for_case(con_dict["caseid"])

        # get links for requirement
        elif "requirement" in con_dict and "links" in con_dict:
            wi.list_linked_wis_for_req(con_dict["requirement"])

        # Test Run
        elif "run" in con_dict or ("query" or "template") in con_dict:
            tr = CliTestRun(fdict["project"])
            if "query" in con_dict and "plan_id" in con_dict:
                print("Getting plan_ids ...")
                tr.get_plans(con_dict["query"])

            # Get case list from template
            elif "template" in con_dict and "workitem_type" in con_dict:
                print("Getting case list for specified template...")
                tr.list_cases_from_run(fdict["project"], con_dict["template"])

            # Get case list from run
            elif "run" in con_dict and "workitem_type" in con_dict:
                print("Getting case list for specified run...")
                tr.list_cases_from_run(fdict["project"], con_dict["run"])

            # Get runs by query
            elif "run" not in con_dict and "template" not in con_dict:
                print("Getting runs by query...")
                tr.list_runs(False, con_dict["query"])

            # Get templates by query
            elif "query" in con_dict and "template" in con_dict:
                print("Getting templates by query...")
                tr.list_runs(True, con_dict["query"])

            elif "plannedin" in con_dict and "run" in con_dict:
                print("Getting PlannedIn...")
                tr.list_plannedin(con_dict["run"])

            elif "assignee" in con_dict and "run" in con_dict:
                print("Getting assignee...")
                tr.list_assignee(con_dict["run"])

            else:
                usage()
                sys.exit(0)

        # workitems in the document
        elif "document" in con_dict.keys():
            doc_name_with_space = "%s/%s" % (fdict['space'],
                                             con_dict['document'])
            # the document commands with work item type

            if "workitem_type" in con_dict.keys():
                doc.list_workitems_in_doc(doc_name_with_space,
                                          con_dict['workitem_type'])
            else:
                print "Quit - Mising option -t"
                usage()
                sys.exit(0)

    elif sys.argv[1] == "update":
        optstr = 'd:t:i:q:m:r:e:c:o:u:shlvpn:a:'
        con_dict = get_opts(sys.argv, optstr, lst)

        # update steps for the case
        if "caseid" in con_dict and "steps" in con_dict:
            step_file = ("%s/%s.txt" % (output_dir, con_dict['caseid']))
            caseid = con_dict["caseid"]
            wi.sync_steps(caseid, step_file)

        elif "caseid" in con_dict and "run" in con_dict:
            comm = "No comment"
            if "comment" in con_dict:
                comm = con_dict["comment"]
            tr = CliTestRun(fdict["project"])
            tr.set_one_result(user, con_dict["run"], con_dict["caseid"],
                              con_dict["result"], comm)

        elif "result" in con_dict and "run" in con_dict:
            question = "Updating will spend few seconds per case, continue?"
            is_yes = get_input("%s (N/Y)" % question)
            if is_yes in ["Y", "y"]:
                comm = "No comment"
                if "comment" in con_dict:
                    comm = con_dict["comment"]
                tr = CliTestRun(fdict["project"])
                print("comment is %s" % comm)
                tr.set_all_result(user, con_dict["run"],
                                  con_dict["result"], comm)
            else:
                print("Recommend to set result in Polarion website!")

        # update status for run
        elif "status" in con_dict and "run" in con_dict:
            tr = CliTestRun(fdict["project"])
            tr.set_status(con_dict["run"], con_dict["status"])

        # update PlannedIn and Assignee for run
        elif "plannedin" in con_dict and "run" in con_dict:
            tr = CliTestRun(fdict["project"])
            if "assignee" in con_dict:
                assignee = con_dict["assignee"]
            else:
                assignee = user
            tr.set_plannedin(con_dict["run"], con_dict["plannedin"], assignee)

        # update Assignee for run
        elif "assignee" in con_dict and "run" in con_dict:
            tr = CliTestRun(fdict["project"])
            tr.set_assignee(con_dict["run"], con_dict["assignee"])

        else:
            usage()
            sys.exit(0)

    elif sys.argv[1] == "create":
        optstr = 'd:t:i:q:m:r:e:c:o:u:shlvp:a:n'
        con_dict = get_opts(sys.argv, optstr, lst)
        template = None
        if "run" in con_dict:
            tr = CliTestRun(fdict["project"])
            if "template" in con_dict:
                template = con_dict["template"]
            if check_parameter("plan_id",
                               con_dict) and check_parameter("assignee",
                                                             con_dict):
                plan_id = con_dict['plan_id']
                assignee = con_dict['assignee']
            elif check_parameter("plan_id",
                                 fdict) and check_parameter("assignee",
                                                            fdict):
                plan_id = fdict["plan_id"]
                assignee = fdict["assignee"]
            else:
                print("Missing parameters: -p and -a")
                sys.exit(0)
            tr.create_run(fdict["project"], con_dict["run"], template,
                          plan_id, assignee)
        else:
            print("Sorry, current version doesn't support another create")
            sys.exit(0)

    elif sys.argv[1] == "delete":
        print("Sorry, command lines doesn't support to delete")
        sys.exit(0)

    else:
        usage()
        sys.exit(0)

if __name__ == "__main__":
    main()
